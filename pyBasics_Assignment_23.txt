1. What is the result of the code, and why?
>>> def func(a, b=6, c=8):
print(a, b, c)
>>> func(1, 2)

OUTPUT:>>> 1, 2, 8

2. What is the result of this code, and why?
>>> def func(a, b, c=5):
print(a, b, c)
>>> func(1, c=3, b=2)

OUTPUT:>>> 1, 2, 3

3. How about this code: what is its result, and why?
>>> def func(a, *pargs):
print(a, pargs)
>>> func(1, 2, 3)

OUTPUT:>>> 1, (2, 3)

4. What does this code print, and why?
>>> def func(a, **kargs):
print(a, kargs)
>>> func(a=1, c=3, b=2)

OUTPUT:>>> 1, {'c':3, 'b':2}

5. What gets printed by this, and explain?
>>> def func(a, b, c=8, d=5): print(a, b, c, d)
>>> func(1, *(5, 6))

OUTPUT:>>> 1, 5, 6, 5

EXPLANATION: When the tuple (5,6) is unpacked in the function call braces, they become positional arguments for b and c respectively and the default values are updated accordingly.

6. what is the result of this, and explain?
>>> def func(a, b, c): a = 2; b[0] = 'x'; c['a'] = 'y'
>>> l=1; m=[1]; n={'a':0}
>>> func(l, m, n)

>>> l, m, n

OUTPUT:>>> 1, ['x'], {'a':'y'}
