explore OOPs terms like: ENCAPSULATION, POLYMORPHISM, ABSTRACTION, INHERITANCE

explore 'Operator Overloading':                                   <<-- OPERATOR OVERLOADING

        operator overloading means redefining the behaviour of the python basic operators in relation to the objects of your class.
        
        operator overloading is done by overwriting the hidden methods like __add__()
        The following operator overloadings are possible in python:
            Unary operators - __neg__, __pos__, __abs__, __invert__
            Comparison operators - __lt__, __le__, __eq__, __ne__, __gt__, __ge__
            Numeric operators - __add__, __sub__, __mul__, __truediv__, __floordiv__, __mod__, __pow__
            Bitwise operators - __and__, __or__, __xor__, __lshift__, __rshift__
            Augmented assignment operators - __iadd__, __isub__, __imul__, __itruediv__, __ifloordiv__, __imod__, __ipow__, __iand__, __ior__, __ixor__, __ilshift__, __irshift__
            Container operators - __len__, __getitem__, __setitem__, __delitem__, __contains__
            Callable operators - __call__
            Attribute access operators - __getattr__, __setattr__, __delattr__, __getattribute__
            
            OVERLOADING THE '+' OPERATOR:
                class MyClass:
                def __init__(self, value):
                    self.value = value
                def __add__(self, other):
                    return MyClass(self.value + other.value)

explore __iter__, __next__

explore __str__ and __repr__ methods. They are used by the print() and repr() functions respectively

explore intercepting slicing operations using __getitem__                        <<-- SLICING OPERATION METHOD
        the slice operator creates a 'slice object' when we pass the notation 'start:stop:step' into it.
        
        instead of using list[start:stop:step], we can also call upon the __getitem__ method directly like list._getitem__(slice(a,b,c))
        
explore OOP concepts like DELEGATION, COMPOSITION

explore : What is a bound method

explore atexit module

explore Context Manager in Python

explore user defined Exceptions

explore how are class-based exceptions matched to handlers

explore EXCEPTION CHAINING

explore Class-based exceptions in python3.x vx String based exception in python 2.x

explore what are byte and bytearray dtypes, how are they related to str? are they string dtype??

explore unicode 16-bit vs unicode 32-bit ??

explore unicode vs ASCII vs byte-based encoding in python 3.x vx python 2.x

explore What is the difference between properties and descriptors