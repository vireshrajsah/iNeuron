Q1. Define the relationship between a class and its instances. Is it a one-to-one or a one-to-many
partnership, for example?

>> Class is a bluprint of an object. Object is an actual softwar manifestation of the class. Class-object relation is a one to many relationship.

Q2. What kind of data is held only in an instance?

>> an instance holds the insstance variables defined inside the instance as well as any dat inthe form of int, str, list, etc in that instance.

Q3. What kind of knowledge is stored in a class?

>> A class holds the code or the logic to define each instance of the class as well as the information about its methods. It also holds the data of class attributes.

Q4. What exactly is a method, and how is it different from a regular function?

>> 

Q5. Is inheritance supported in Python, and if so, what is the syntax?

>> 

Q6. How much encapsulation (making instance or class variables private) does Python support?

>> 

Q7. How do you distinguish between a class variable and an instance variable?

>> 

Q8. When, if ever, can self be included in a class&#39;s method definitions?

>> 

Q9. What is the difference between the _ _add_ _ and the _ _radd_ _ methods?

>> 

Q10. When is it necessary to use a reflection method? When do you not need it, even though you
support the operation in question?

>> 

Q11. What is the _ _iadd_ _ method called?

>> 

Q12. Is the _ _init_ _ method inherited by subclasses? What do you do if you need to customize its
behavior within a subclass?

>> 
