Q2. What is the best way to declare a class's metaclass?

>> we can define a metaclass for a class by setting the metaclass attribute of the class.
   Example:
        class MyMeta(type):
            pass

        class MyClass(metaclass=MyMeta):
            pass


Q3. How do class decorators overlap with metaclasses for handling classes?

>> Both class decorators and metaclasses are used to modify classes in Python. Class decorators are functions that take a class object as input and return a modified class object. They are applied to a class using the @decorator_name syntax before the class definition. On the other hand, metaclasses are classes that define the behavior of a class. They are used to create new classes dynamically, and they can be customized to modify the behavior of the class they create.

Q4. How do class decorators overlap with metaclasses for handling instances?

>> A class decorator is a function that takes a class object and returns a new class object. This new class object can be used to customize the behavior of instances of the original class, either by adding new methods, modifying existing methods, or modifying the class attributes.

Similarly, metaclasses can be used to customize the behavior of instances of a class by modifying the class itself. Metaclasses can add new methods, modify existing methods, or modify the class attributes. When an instance of the class is created, the metaclass can also customize the behavior of the instance by modifying the instance attributes or adding new instance methods.
