1. What is the result of the code, and explain?

>>> X = 'iNeuron'
>>> def func():
        print(X)

>>> func()

OUTPUT:
>>>'iNeuron'

2. What is the result of the code, and explain?

>>> X = 'iNeuron'
>>> def func():
X = 'NI!'

>>> func()
>>> print(X)

OUTPUT:
>>>'iNeuron'

EXPLAINATION: The x variable inside the function block is a local variable and cannot change the global variable.

3. What does this code print, and why?

>>> X = 'iNeuron'
>>> def func():
X = 'NI'
print(X)

>>> func()
>>> print(X)


OUTPUT:
>>>'NI'
>>>'iNeuron'

EXPLAINATION: First string is printed from the function from the local variable. The next strin is the global variable x.

4. What output does this code produce? Why?

>>> X = 'iNeuron'
>>> def func():
global X
X = 'NI'

>>> func()
>>> print(X)

OUTPUT:
>>>'NI'

EXPLAINATION: the global keyword makes the local variable to refer to the global variable of the same name and the changes are reflected in the global variable.

5. What about this code—what’s the output, and why?

>>> X = 'iNeuron'
>>> def func():
X = 'NI'
def nested():
print(X)
nested()

>>> func()
>>> X

OUTPUT:
>>>'NI'
>>>'iNeuron'

EXPLANATION:The X variable in printed by the nested function when func() is called. the nested function uses the local X variable. The next stroing is the global variable.

6. How about this code: what is its output in Python 3, and explain?

>>> def func():
X = 'NI'
def nested():
nonlocal X
X = 'Spam'
nested()
print(X)

>>> func()

OUTPUT:
>>>'Spam'

EXPLANATION: the 'nonlocal' keyword refers to the X variable just outside the local scope, but not the global variable.
